2021.08.27

* refactor -> rename = 변수명 전체 바꿈

* 형변환
  ex) float = temp;
      temp = (float)13.33;

* GarbageCollection : heap영역 자동정리 시스템
  - 자바에는 존재
  언제 GarbageCollection이 쓰이나?(면접 질문)

* alt + 방향키 왼/오 : 이전파일 열기


* printf에서 %d할 때 자릿수 맞추고 싶을 때
  ex) printf("%05d) -> 5자리로 맞추고 싶을 때 부족한 부분을 0으로 채운다.

* printf에서 %f출력시 두자릿수 까지 => %.2f

* printf에서 몇 퍼센트 출력시 => %.2f%%로 %를 두번씀

* %b : boolean

* '=' 모든 연산자 중 가장 마지막에 발동

* 문자열(String) + ? = 문자열에 붙여서 이어 나옴

* 나눗셈 때는 형변환 필수!!! ex) int 형 나누기는 float/double 으로 형태를 바꾼다. => (float/double)



2021.08.30

* &&(and) ||(or) !(not) ^(xor)


* shift연산 ( << , >> )= 이진수로 바꿔서 미는 것 
  ex) 3 << 2 -> 3은 11(2)이고 왼쪽으로 2번 밀어서 1100(2)로 바꿔줌 그리고 다시 10진수로 바꿔서 12


* 3항 연산일 때 -> 조건식 ? 참일 때 값 : 거짓일 때 값


* 3항 연산을 String형으로 비교할 때는 .equals를 써야함
  $안되는 이유 : 연산자는 stack에 있고 String형으로 이름을 저장하면 heap에 있다. 
                 따라서 heap에서 스택으로 불러와야함. 그래ㅓㅅ name.equals를 씀
  ex) String say2 = (name="홍길동") ? "어?야!" : "어서오세요"; --> 안되는 것
      String say2 = (name.equals("홍길동")) ? "어?야!" : "어서오세요"; --> 되는 것




2021.08.31

* 로컬 변수는 메소드 안에 존재한다.-> 스택에 들어감 쓰면 바로 반환된다.
  = 메소드 안에 로컬 변수 선언 그 후 초기화하여 사용함.

2021.09.01

* 배열 선언 -> int arr[] = new int[10];

* 배열 시 향상된 for문을 사용하는 것이 좋다
  원래 -> for(int i=0;i<fruit.length;i++) {
			System.out.println(fruit[i]);
		}                                       


   향상된 것 -> for(String f:fruit) {
	    System.out.println(f);
	}


2021.09.02

* 이차원 배열 선언 int a[][] = new int[2][3];

* 이차원 배열일 때는 이중 for문 사용
  ->for(int i=0;i<score.length;i++){
	for(int j=0;j<score[i].length;j++){
	}
    }

* 이차원 배열 시 향상된 for문
  for(int score[]:score){
	for(int j:score){
	
	}
  } 

* 최고 점수 if(max<score[i]){
		max=score[i];
	     }


* 최저 점수 if(min>score[i]){
		min=score[i];
	     }

* 배열 복사 시 : System.arraycopy(기존 것,어디부터복사할지, 새로운 곳, 어디서부터 받을 것인가, 몇개만큼);

* 생성자의 특징 : 1. 클래스 이름과 동일
		  2. 리턴 타입 없음
		  3. 중복 가능(생성자 오버로딩)




2021.09.06


* 클래스 만들 때 속성 -> 생성자 -> 메소드 순으로 하는 것이 의문은 아니지만 좋다.

* 리턴 타입 메소드 명(){}
	- 리턴 타입 : 기본타입( int, float, double, char 등)
		      참조타입( 배열, 클래스, 인터페이스)
	
	- 메소드명 : 자바의 이름짓는 규칙
		     영어(시작은 소문자)
			ex) int a; int b7;
		     특수문자(_,$ 만 허용)
		     예약어(if,else,switch 등) 사용 안됨

	- 클래스명 : 대문자로 시작

* 형변환
  - 자동형변환 : int = byte;   -> 작은 타입을 큰 타입에 대입할 때
  - 강제형변환 : int = (int)float; -> 큰 타입을 작은 타입에 대입할 때

* 클래스 기본 생성자 
  -> Ex)클래스 이름과 같이 씀(){} 아무것도 안쓰기 

* 생성자 source -> generate constructor using field

* 변경하고 싶을 땐 set , 리턴하고 싶을 땐 get

* this() : 다른 생성자 호출

* 기본타입일 땐 배열 이름 소문자 : byte, char, short, int, long, float, double, boolean

* 클래스 배열 : ex)Account3이면 Acc로 쓴다.



2021.09.07

* 메소드 오버로딩 : 하나의 클래스에 동일한 이름으로 메소드가 존재 
		    단, 괄호 안을 다르게 해야 함.

* 오버로딩 vs 오버라이딩 -> 면접에서 기초적으로 질문함 종종

* getter : 현재 멤버변수의 상태를 알고 싶다.

* setter : 현재 멤버변수의 상태를 변경하고 싶다.

* 메소드(기본타입) -> 값의 복사

* 메소드(참조타입) -> 주소 복사(대부분 대문자)
  - 여러 개의 메소드가 동일한 객체를 참조할 수 있도록 만들어주는 방법

* static(정적) : 클래스에 고정된 멤버, 객체를 생성하지 않고 사용하는 것을 의미한다.
		->static일 때 클래스 이름을 사용한다 ex) Card.height
		->static일 때 생성자 지정하면 목록에 없다.

* static(정적) 메소드 : 객체를 생성하지 않고 사용
			클래스가 메모리에 로드될 때 생성, 
			static메소드 안에서 인스턴스 멤버 사용 불가 -> this.kind(x) , kind=" (x)
			같은 static 메소드는 부를 수 있다.

* static이 사용되는 곳 : 멤버변수, 메소드, 초기화블럭


2021.09.08

* 메소드 오버로딩 : 메소드 이름이 같아야 한다.
		    매개 변수의 개수 또는 타입이 달라야 한다(괄호 안이 달라야함!)

* final : 수정불가 / 초기화 무조건 필요(생성자를 만든다.) 

* final 사용되는 곳 : 클래스, 메소드. 지역변수, 

* 상속 : 기존의 클래스를 재사용하여 새로운 클래스를 작성

* 상속의 장점 : - 적은 양의 코드로 새로운 코드를 작성할 수 있음.
	 - 공통적으로 관리하기 때문에 코드의 추가 및 변경이 용이함
	 - 코드의 중복 제거 -> 프로그램 생산성과 유지보수 높아짐

* 조상 클래스 : 부모,상위,super
* 자손 클래스 : 자식,하위,sub

* extends 부모 클래스명

* 생성자와 초기화 블럭은 상속되지 않음

* private 멤버변수는 접근이 제한됨

* 오버라이딩(overrriding) : 조상 클래스로부터 상속받은 메소드의 내용을 변경 조건
  1. 이름이 같아야 한다.
  2. 매개변수가 같아야 한다.
  3. 변환 타입이 같아야 한다.

* 오버라이딩 실행 방법 : 자식 것과 같은 것을 이름을 쓰고 자동완성으로 부른다.

* 오버라이딩 쓰는 이유 : 부모가 물려준 것을 그대로 쓰지 않고 기능을 추가하고 싶을 때 사용한다. 

* 오버로딩 vs 오버라이딩
  - 오버로딩 : 새로운 메소드 정의(같은 이름으로 매개변수만 다르게) 
  - 오버라이딩 : 상속받은 메소드의 내용을 변경하는 것(자식 것이 실행된다.)
	-> 만약 부모껏만 호출하고 싶다면 super.**(); 를 사용한다.


2021.09.09

* 상속관계는 형변환 가능 업캐스팅(형변환 생략가능)

* 다운캐스팅(형변환 생략 불가능)

* 다형성 : 왼쪽 부모 오른쪽 자식 ex) (Employee e)

* 클래스 관계
  - 상속(is-a) : ~은 ~이다.
  - 포함(has-a): ~은 ~을 가지고 있다.

* source -> to String() 누르면 자동으로 toString()생성된다.

* 추상클래스 
  - 클래스 => 설계도
  - 추상클래스 => 미완성 설계도 
		  메서드 미완성 -> 추상 메서드
		  int sum(int a, int b);

* 추상클래스는 객체 생성 불가

* 인터페이스,추상클래스,클래스 세 개 중 인터페이스를 가장 많이 부모로 사용한다.

* 인터페이스 : 추상클래스 비슷, 완전 추상화, 기본 설계도

* 클래스(설계도), 추상클래스(미완성설계도), 인터페이스(기본설계도)

* 인터페이스 
	- 상수 필드만 가질 수 있다.
	- 추상 메소드만 가진다.
	- 1.8 버전 부터 static, default 메소드는 들어올 수 있다.
	- public static final은 상수로만 하면 생략가능 
	  ex)int SPADE =4; 와 public static final int SPADE=4; 는 같다.
	- 상속 가능
	- 클래스 -> 단일상속
	- 인터페이스-> 다중상속
	- implements : 구현 + 확장
	- extends : 확장
	- 인터페이스에서 만든 것 클래스에서 다시 객체생성 안하고 바로 쓸 수 있다.
	  (직접적인 객체 생성 불가)
	- 부모 = 자식 ;
	- implements를 통해서 여러개의 인터페이스를 구현 할 수 있다. 

* 익명구현객체

* enum : 열거 상수

* 열거타입(enum) : 열거 상수들의 모임


2021.09.13

* finally : exception상관없이 무조건 실행

* throws : 여기서 발생한 예외들 이 메소드를 호출하는 곳으로 던지겠음

* throws ClassNotFoundException : jvm한테 던져지는 의미 -> 화면 출력

* Exception 처리 방법
  - try ~ catch문
  - throws

* 사용자 정의 예외
 - exception -> class -> 상속

* equals()

* toString() : 무조건 오버라이딩 (주소값을 값으로 바꿔서 출력시킴)

* int 값을 문자열로 변경하는 가장 쉬운 방법 : int+"";



2021.09.14

* flag : boolean flag = true/false로 선언 
  ex)  -> System.out.println(flag? "포함하고있음":"포함하고 있지않음"); 으로 마무리

* indexOf : 매개값으로 주어진 문자열이 시작되는 위치를 리턴해준다.

* string을 replace할 떄 꼭 앞에 다시 담아줘야지 바뀐다.
  ex)  -> str1=str1.replace("자바", "java");

* equalsIgnoreCase : 대소문자 무시하고 비교

* StringBuffer, StringBuilder : 기존 문자열에서 새롭게 문자열 생성할 때 사용

* 문자열 추가 : append

* toCharArray : 배열에 한글자씩 담을 때 사용

* math.round = 반올림

* math.ceil = 올림

* math.floor = 버림



2021.09.15

* List(인터페이스) : 순서가 있다, 데이터의 중복 가능

* 구현 클래스 : Vector, ArrayList, LinkedList, stack

* list 쓸 때 : int -> Integer, flat -> Float, double -> Double, char->Character, boolean->Boolean

* 선언 방법 : 
  - List<String> list1 = new ArrayList<String>();
  - ArrayList<Integer> list2 = new ArrayList<Integer>();

* ArrayList vs LinkedList
  - 순차적으로 추가/삭제 시 ArrayList 좀 더 빠름
  - 중간 데이터를 추가/삭제 시 LinkedList가 좀 더 빠름

* SQL은 대소문자 구별을 안함(쿼리문만), 대소문자 구별은 비밀번호만 함, ''로 사용


* 테이블 조회 할 때 select

* 중복 제거 후 조회: distinct

* 별칭을 붙여서 조회 : AS(alais)

* 정렬 : ORDER BY 컬럼명 기준(오름차순(asc),내림차순(Desc))

* 특정 조건을 기준으로 원하는 데이터를 조회 : WHERE

2021.09.16

* deepToString : 2차원배열일 때 사용

* int를 객체형태로 바꿀 때 : integer사용
  ex) Integer arr4[]= {37,21,56,99,98,77,55};

* comparator.reverseOrder() : 내림차순

* 몇 번째인지 찾을 때 Arrays.binarySearch 사용
  -binarysearch는 정렬을 먼저 한 후 사용해야함!!!!!!
  ex) int pos = Arrays.binarySearch(arr, 56);

* LIKE사용시 
 - 'ㅁ%';로 사용
 - 두번쨰일때 : '_ㅁ%';
 - 중간에 껴있을 때 '%ㅁㅁ%';
 - 아닐 떄 : NOT LIKE 'ㅁ%';

* union = 중복값 제거 / union all = 중복값 제거 안함

* 교집합 : INTERSECT 

* 차집합 : MINUS



2021.09.17

* File : 파일을 다루기 위한 클래스

* 폴더(디렉토리) : /,|(두개씩 쓴다.)

* 연동하는 방법 
  ex)

  //sql 구문을 작성 -> emp의 모든 데이터 조회
 				String sql="SELECT *FROM emp";
				
  //sql 구문을 데이터 베이스 서버로 전송
				pstmt=con.prepareStatement(sql);
				
  //sql 구문이 실행된 결과를 받아오기
				rs=pstmt.executeQuery();

  // sql 결과를 화면에 출력
				System.out.println("empno\tename\tjob\t\tmgr\thiredate\t\tsal\tcomm\tdeptno");
				while (rs.next()) { // Resultset객체 안에 읽어올 내용이 있으면 true
					System.out.print(rs.getString("empno")+"\t");
					System.out.print(rs.getString("ename")+"\t");
					System.out.print(rs.getString("job")+"\t\t");
					System.out.print(rs.getString("mgr")+"\t");
					System.out.print(rs.getString("hiredate")+"\t");
					System.out.print(rs.getInt("sal")+"\t");
					System.out.print(rs.getInt("comm")+"\t");
					System.out.println(rs.getInt("deptno"));
				}



* 문자길이 구하기
 - LENGTH() : 해당 문자열의 길이 돌려줌
 - LENGTHB() : 해당 문자열의 바이트수 돌려줌


* 문자열 일부를 추출하기
 - SUBSTR(문자열데이터, 시작위치, 추출길이)
 - SUBSTR(문자열데이터, 시작위치)


* 문자열 데이터 안에서 특정 문자를 찾기
 - INSTR(문자열, 찾을 문자열, 시작위치, 몇번째에 있는걸 찾을 것인지) 
 - 해당 문자열의 길이를 알려줌

* 특정 문자를 다른 문자로 바꾸는 함수
 - replace(문자열 데이터,찾는 문자, 바꿀문자)

* || : 문자열 데이터 연결 연산자



2021.09.23

* 처리할 파일이 문자라면 Reader,Writer가 편함.

* TRIM : 양쪽 공백 제거

* LTRIM : 왼쪽 공백 제거

* RTRIM : 오른쪽 공백 제거

* TRIM((삭제옵션 선택), 삭제할 문자(선택), from 원본 문자열)


* CONCAT 문자 연결하는 것 : 두 개 까지 가능


* 숫자함수 : 

- ROUND(숫자,반올림 위치(선택))

- TRUNC(숫자,버림 위치(선택))

- CEIL(숫자) : 입력된 숫자와 가장 가까운 큰 정수
 
- FLOOR(숫자) : 입력된 숫자와 가장 가까운 작은 정수

- MOD(숫자,나눌숫자) : 나머지 값


* 날짜 함수 : SYSDATE : 오라클 데이터베이스 서버가 설치된 os의 현재 날짜와 시간

* 20주년 동안 일한 사람 구할 때 : add_months(hiredate,240) 240=20*12

* MONTHS_BETWEEN : 두 날짜 간의 개월 수 차이 구하기

* next_day(sysdate,'월요일') 

* last_day(sysdate)



* 형변환 함수
- to_char() : 숫자 또는 날짜 데이터를 문자 데이터로 변환
  ex)select to_char(sysdate,'YYYY/MM/DD') as 현재날짜 from dual;
     select sysdate,to_char(sysdate,'HH24:MI:SS') as 현재시간 from dual


- to_number() : 문자 데이터를 숫자 데이터로 변환
  ex) select to_number('1,300','999,999') from dual;

- to_date() : 문자 데이터를 날짜 데이터로 변환
  ex) select to_date('2021-09-12','YYYY-MM-DD') as todate1, 
      to_date('20210912','YYYY-MM-DD') as todate2 from dual;

- 날짜 데이터는 연산이 가능함
  ex) 1981년 이후 입사자 구하기
      select * from emp where hiredate>to_Date('1981/06/01','YYYY-MM-DD');

* null처리 함수 : nvl
  ex) select empno, ename, sal, comm, sal+comm,nvl(comm,0), sal+nvl(comm,0) from emp;

* NVL2(데이터, 널이 아닐 경우 반환할 값, 널이면 반환할 값)
  ex) select empno,ename, sal, comm, NVL2(comm,'O','X'),NVL2(comm,sal*12+comm,sal*12) from emp;



* DAO : database와 관련된 작업 클래스

* 커넥션, 조회(select),삽입,삭제,수정

* 커넥션 하는 법 
  1. 드라이버 로드 (static안에서 Class.forName누르고 try/catch하고 그 후 forName안에 "oracle.jdbc.OracleDriver" 작성)
  2. 그리고 연결해줌

* DTO : data transfer object


2021.09.27

* DAO파일에서 1개 출력시 : EmpDTO dto = null; 선언하고 if문 사용 

* 여러개 출력시 : list만들고 while문 사용(EmpDTO dto = new EmpDTO(); dto=new EmpDTO();) list.add(dto)한다.


* 정적쿼리 : 외부에서 입력된 데이터를 자료형에 맞게 지정된 위치에 바인딩 시키는 방식
  ex) "select * from emp where id=?"; 
      PreparedStatement 객체를 이용함.


* 동적쿼리 : 동적으로 SQL 실행문을 만들어서 사용 
  ex) select * from emp where id='1234';
      "select * from emp where id='"+id+"'";
	=> 쿼리문 조작이 가능함 => SQL Injection이라고 한다.

* 디버그 => 디버깅 도구인 벌레를 통해 함 먼저 breakpoint를 걸고 확인함



* DECODE 함수 -> DECODE([검사 대상이 될 열 또는 데이터],
		[조건1],[데이터가 조건 1과 일치할 때 반환할 결과],
		[조건2],[데이터가 조건 1과 일치할 때 반환할 결과],
		......
		[위 조건들 중에서 일치한 경우가 없을 때 반환할 결과])

   ex)decode(job, 'MANAGER', sal * 1.1, 'SALESMAN', sal * 1.05, 'ANALYST', sal, sal * 1.03)



* CASE 함수 : DECODE문으로 작성할 수 있는 것들은 모두 변환 가능 
              '=' 의 의미로 사용되지만 다른 조건도 가능하다.


  ex)긍정일 때 '='의 의미가 있을 때(case 옆에 필드명이 있음)
	CASE job
	WHEN 'MANAGER'  THEN
            sal * 1.1
        WHEN 'SALESMAN' THEN
            sal * 1.05
        WHEN 'ANALYST'  THEN
            sal
        ELSE
            sal * 1.03
   	 END AS upsal
	FROM
  	  emp;

  ex)부정일 때(case옆에 필드명이 아니라 조건을 나열할 수 있음)
	select empno,ename,comm, 
	case  
	when comm is null then '해당사항없음' 
	when comm = 0 then '수당없음'
	when comm >0 then '수당 : '||comm
	end as comm_text from emp;

	
* 숫자에서 앞 두자리만 쓸 때 : substr(to_char(mgr)1,2)


* 다중행 함수 : sum(), count(), max(), min(), avg()
  ex)  select sum(sal) from emp;

* Group by 그룹화할 열 지정(여러개 지정 가능)